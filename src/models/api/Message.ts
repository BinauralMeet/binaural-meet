export interface Perceptibility {
  visibility: boolean             // the whole object is visible
  coreContentVisibility: boolean  // core content (e.g. video stream for remote participant) is visible
  audibility: boolean             // the audio of object could be heard
}

export interface MapObject {
  pose: Pose2DMap
  perceptibility: Perceptibility // used for skip rendering for optimizing performance
}

export interface Pose2DMap {
  position: [number, number]
  orientation: number
}

export type ContentType = 'img' | 'text' | 'pdf' | 'youtube' | 'iframe' | 'screen' | 'camera' |
  'gdrive' | 'whiteboard' | ''
export interface RemoteInformation {
  name: string
  avatarSrc: string
  color: number[]
  textColor: number[]
}
export interface SharedContentData {
  zorder: number                  //  unix timestamp when shared or moved to top.
  name: string                    //  name or title of the content.
  ownerName: string               //  name of the initial owner
  color:number[]                  //  color in the left var
  textColor:number[]              //  textColor in the left var
  type: ContentType               //  content type ('img', etc)
  url: string                     //  url or text to share
  pose: Pose2DMap                 //  position and orientation
  size: [number, number]          //  current size of the content
  originalSize: [number, number]  //  original size of the content or [0, 0]
  pinned: boolean                 //  pinned (not resizable or resizable)
}
export interface SharedContentId{
  id: string                      //  unique ID (generated by participant id + number)
}
export interface SharedContent extends MapObject, SharedContentData, SharedContentId {
  zIndex?: number
}


export const MessageType = {
  REQUEST: 'request',
  ADD_PARTICIPANT: 'add_p',
  REMOVE_PARTICIPANT: 'del_p',
  UPDATE_PARTICIPANT: 'update_p',
  UPDATE_CONTENTS: 'update_c',
  ALL_INFOS: 'all_i',           //  server send when requrested.
  CLEAR: 'clear',               //  clear server's info.
}

export interface Message {
  t: string,  //  type
  r: string,  //  room id
  p: string,  //  participant id
  v: string,
}
export interface RoomInfo {
  r: string,
  ps: {p:string, v: string}[],
  cs: {p:string, v: string}[]
}
